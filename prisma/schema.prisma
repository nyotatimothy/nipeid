generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                  @id @default(uuid())
  name          String?
  email         String?                 @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          Role                    @default(USER)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  password      String?
  status        UserStatus              @default(PENDING)
  provider      String?
  providerId    String?
  disputes      Dispute[]
  claims        Document[]              @relation("UserClaims")
  documents     Document[]              @relation("UserDocuments")
  statusChanges DocumentStatusHistory[] @relation("UserStatusChanges")
  notifications Notification[]
  managedKiosks Kiosk[]                 @relation("KioskManagers")

  @@index([provider, providerId])
}

model Document {
  id               String                  @id @default(uuid())
  firstName        String
  middleName       String?
  lastName         String
  dateOfBirth      DateTime
  documentNumber   String
  foundLocation    String
  foundDistrict    String
  foundDivision    String
  foundSubLocation String
  dateFound        DateTime
  condition        Condition
  kioskId          String
  posterId         String
  claimedById      String?
  status           DocumentStatus          @default(UPLOADED)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  expiredAt        DateTime?
  documentType     DocumentType
  disputes         Dispute[]
  claimedBy        User?                   @relation("UserClaims", fields: [claimedById], references: [id])
  kiosk            Kiosk                   @relation(fields: [kioskId], references: [id])
  poster           User                    @relation("UserDocuments", fields: [posterId], references: [id])
  statusHistory    DocumentStatusHistory[]
  notifications    Notification[]
}

model Kiosk {
  id             String      @id @default(uuid())
  name           String      @unique
  location       String
  phone          String
  hours          String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  contactPerson  String?
  email          String?     @unique
  password       String?
  status         KioskStatus @default(PENDING)
  accessInfo     String?
  address        String?
  city           String?
  county         String?
  description    String?
  fridayHours    String?
  landmarks      String?
  latitude       Float?
  longitude      Float?
  mondayHours    String?
  parkingInfo    String?
  postalCode     String?
  saturdayHours  String?
  sundayHours    String?
  thursdayHours  String?
  tuesdayHours   String?
  wednesdayHours String?
  documents      Document[]
  managers       User[]      @relation("KioskManagers")
}

model Notification {
  id         String              @id @default(uuid())
  userId     String?
  documentId String?
  type       NotificationType
  channel    NotificationChannel
  message    String
  sent       Boolean             @default(false)
  createdAt  DateTime            @default(now())
  document   Document?           @relation(fields: [documentId], references: [id])
  user       User?               @relation(fields: [userId], references: [id])
}

model Dispute {
  id          String          @id @default(uuid())
  userId      String
  documentId  String
  category    DisputeCategory
  explanation String?
  status      DisputeStatus   @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  document    Document        @relation(fields: [documentId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
}

model DocumentStatusHistory {
  id          String         @id @default(uuid())
  documentId  String
  status      DocumentStatus
  changedById String?
  createdAt   DateTime       @default(now())
  changedBy   User?          @relation("UserStatusChanges", fields: [changedById], references: [id])
  document    Document       @relation(fields: [documentId], references: [id])
}

model ContactRequest {
  id             String        @id @default(uuid())
  name           String
  email          String
  phone          String?
  documentNumber String?
  firstName      String?
  lastName       String?
  dateOfBirth    DateTime?
  searchQuery    String?
  notified       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  documentType   DocumentType?
}

enum Role {
  VISITOR
  USER
  POSTER
  KIOSK_MANAGER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum Condition {
  GOOD
  MEDIUM
  BAD
}

enum DocumentStatus {
  UPLOADED
  AWAITING_KIOSK_ACK
  KIOSK_CONFIRMED
  CLAIMED
  DISPATCHED
  ARCHIVED
}

enum KioskStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum NotificationType {
  CLAIM
  UPLOAD
  KIOSK_ACK
  KIOSK_DISPATCH
  REMINDER
  DISPUTE
  DOCUMENT_FOUND
}

enum NotificationChannel {
  EMAIL
  SMS
}

enum DisputeCategory {
  WRONG_PERSON
  INCORRECT_DETAILS
  FRAUD
  OTHER
}

enum DisputeStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum DocumentType {
  NATIONAL_ID
  PASSPORT
  BIRTH_CERTIFICATE
  DRIVING_LICENSE
  OTHER
}
