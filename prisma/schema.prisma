generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String                  @id @default(cuid())
  name                                String?
  email                               String?                 @unique
  emailVerified                       DateTime?
  image                               String?
  phone                               String?
  role                                Role                    @default(USER)
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @updatedAt
  password                            String?
  status                              UserStatus              @default(PENDING)
  provider                            String?
  providerId                          String?
  Dispute                             Dispute[]
  Document_Document_claimedByIdToUser Document[]              @relation("Document_claimedByIdToUser")
  Document_Document_posterIdToUser    Document[]              @relation("Document_posterIdToUser")
  DocumentStatusHistory               DocumentStatusHistory[]
  Notification                        Notification[]
  Kiosk                               Kiosk[]                 @relation("KioskManagers")
}

model Document {
  id              String                  @id @default(cuid())
  documentNumber  String                  @unique
  documentType    DocumentType
  firstName       String?
  lastName        String?
  status          DocumentStatus          @default(UPLOADED)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  claimedById     String?
  posterId        String?
  kioskId         String?
  Dispute         Dispute[]
  claimedBy       User?                   @relation("Document_claimedByIdToUser", fields: [claimedById], references: [id])
  kiosk           Kiosk?                  @relation(fields: [kioskId], references: [id])
  poster          User?                   @relation("Document_posterIdToUser", fields: [posterId], references: [id])
  DocumentHistory DocumentStatusHistory[]
  Notification    Notification[]
}

model Kiosk {
  id        String     @id @default(cuid())
  name      String
  location  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Document  Document[]
  managers  User[]     @relation("KioskManagers")
}

model DocumentStatusHistory {
  id         String         @id @default(cuid())
  documentId String
  userId     String
  status     DocumentStatus
  createdAt  DateTime       @default(now())
  document   Document       @relation(fields: [documentId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
}

model Dispute {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  reason     String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id         String    @id @default(cuid())
  userId     String?
  documentId String?
  message    String
  read       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  document   Document? @relation(fields: [documentId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model ContactRequest {
  id             String        @id @default(cuid())
  documentNumber String?
  documentType   DocumentType?
  firstName      String?
  lastName       String?
  email          String?
  phone          String?
  message        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum Role {
  USER
  KIOSK_MANAGER
  ADMIN
  POSTER
}

enum DocumentType {
  NATIONAL_ID
  PASSPORT
  BIRTH_CERTIFICATE
  DRIVING_LICENSE
  OTHER
}

enum DocumentStatus {
  UPLOADED
  AWAITING_KIOSK_ACK
  KIOSK_CONFIRMED
  CLAIMED
  DISPATCHED
  ARCHIVED
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}
